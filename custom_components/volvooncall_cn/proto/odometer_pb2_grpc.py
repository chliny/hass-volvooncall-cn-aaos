# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import odometer_pb2 as odometer__pb2

GRPC_GENERATED_VERSION = '1.67.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in odometer_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class OdometerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetOdometer = channel.unary_stream(
            '/services.vehiclestates.odometer.OdometerService/GetOdometer',
            request_serializer=odometer__pb2.GetOdometerReq.SerializeToString,
            response_deserializer=odometer__pb2.GetOdometerResp.FromString,
            _registered_method=True)


class OdometerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetOdometer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OdometerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetOdometer': grpc.unary_stream_rpc_method_handler(
            servicer.GetOdometer,
            request_deserializer=odometer__pb2.GetOdometerReq.FromString,
            response_serializer=odometer__pb2.GetOdometerResp.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'services.vehiclestates.odometer.OdometerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('services.vehiclestates.odometer.OdometerService', rpc_method_handlers)

 # This class is part of an EXPERIMENTAL API.


class OdometerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetOdometer(request,
                    target,
                    options=(),
                    channel_credentials=None,
                    call_credentials=None,
                    insecure=False,
                    compression=None,
                    wait_for_ready=None,
                    timeout=None,
                    metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/services.vehiclestates.odometer.OdometerService/GetOdometer',
            odometer__pb2.GetOdometerReq.SerializeToString,
            odometer__pb2.GetOdometerResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
